--
-- eFront v3.6.0 database creation file
--


--
-- Table 'bookmarks'
--
-- This table represents a bookmark. A bookmark is a link to a page that a student can save
-- Fields:
-- id (primary key): A numerical identifier
-- users_LOGIN: The user that this bookmark belongs to, matching the 'login' field at the 'users' table
-- name: The stored page title, for example 'Control Panel'
-- url: The url of the stored page, for example 'http://efront.example.com/student.php?ctg=control_panel'
CREATE TABLE bookmarks (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NOT NULL,
  lessons_ID int,
  name text NULL,
  url text NULL,
  PRIMARY KEY (id),
);

--
-- Table 'cache'
--
-- This table is used for caching. Each cached entity is identified by a sha256 key, which is produced
-- by the concatenation of the entity name and the entity id, for example: 'test:12'
-- Fields:
-- cache_key (primary key): The sha256 unique cached entity id
-- value: The cached entity
CREATE TABLE cache (
  cache_key char(64) NOT NULL,
  value text NULL,
  PRIMARY KEY (cache_key)
);

--
-- Table 'calendar'
--
-- This table represents a calendar event.
-- Fields:
-- id (primary key): A numerical identifier
-- lessons_ID: The id of the lesson that the event is for. The value matches the 'id' field in the 'lessons' table. If it's 0, it means that this event is not associated to any lesson 
-- data: The event itself
-- timestamp: A 10-digit number representing the event's date and time
-- active: Whether this event should appear. Valid values are 0 (not active) and 1 (active)
-- users_LOGIN: The user that posted this event, matching the 'login' field at the 'users' table
CREATE TABLE calendar (
  id int NOT NULL identity,
  lessons_ID int default '0',
  data text NULL,
  timestamp int NOT NULL,
  active int NOT NULL default '1',
  users_LOGIN varchar(100) NOT NULL,
  PRIMARY KEY (id)
);

--
-- Table 'chatmessages'
--
-- This table represent a message posted in the chat
-- Fields:
-- id (primary key): A numerical identifier
-- users_LOGIN: The user that posted this event, matching the 'login' field at the 'users' table
-- users_USER_TYPE: The user's that posted this event type, matching the 'user_type' field at the 'users' table
-- content: The message body
-- timestamp: A 10-digit number representing the time that message was posted
-- chatrooms_ID: The id of the chatroom that the message was posted in, matching the 'id' field of the 'chatrooms' table
CREATE TABLE chatmessages (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NOT NULL,
  users_USER_TYPE varchar(50) NOT NULL,
  content text NULL,
  timestamp int NOT NULL,
  chatrooms_ID int NOT NULL default '0',
  PRIMARY KEY (id)
);

--
-- Table 'chatrooms'
--
-- This table represent a chat room
-- Fields:
-- id (primary key): A numerical identifier
-- name: The name of the chat room
-- create_timestamp: A 10-digit number representing the time that room was created
-- users_LOGIN: The user that created this chat room
-- type: The chat room type, can be either 'private' or 'public'
-- active: Whether this room is active. Valid values are 0 (not active) and 1 (active)
-- lessons_ID: The id of the lesson that this room is associated to, corresponding to the 'id' field of the 'lessons' table. If it's null, then it not associated with any lesson
CREATE TABLE chatrooms (
  id int NOT NULL identity,
  name varchar(150) NOT NULL,
  create_timestamp int NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  type varchar(255) NOT NULL,
  active int NOT NULL default '1',
  lessons_ID int NULL,
  PRIMARY KEY (id)
);

--
-- Table 'comments'
--
-- This table represent a comment attached to a content unit
-- Fields:
-- id (primary key): A numerical identifier
-- data: The comment body
-- users_LOGIN: The user that created this chat room
-- content_ID: The id of the unit this comment was appended to, corresponding to the 'id' field of the 'content' table.
-- timestamp: A 10-digit number representing the time that the comment was posted
-- active: Whether this comment should appear.
CREATE TABLE comments (
  id int NOT NULL identity,
  data text NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  content_ID int NOT NULL default '0',
  timestamp int NOT NULL,
  active int NOT NULL default '0',
  private int NOT NULL default '0',
  PRIMARY KEY (id)
);

--
-- Table 'configuration'
--
-- This table holds the system's configuration options
-- Fields:
-- name (primary key): A word representing the option name
-- value: A string holding the option value
CREATE TABLE configuration (
  name varchar(100) NOT NULL,
  value text NOT NULL,
  PRIMARY KEY (name)
);

--
-- Table 'content'
--
-- This table represent a content unit
-- Fields:
-- id (primary key): A numerical identifier
-- name: The unit name
-- data: The unit body
-- parent_content_ID: An id corresponding to a unit that is parent of this unit. If it's 0, then the unit has no parents (it is a 'root node')
-- lessons_ID: The id of the lesson that this unit is associated to, corresponding to the 'id' field of the 'lessons' table.
-- timestamp: A 10-digit number representing the time that the unit was created
-- ctg_type: The type of the unit. Can be one of: 'theory', 'examples', 'tests', 'scorm', 'scorm_test'
-- active: Whether this unit is active or not. Possible values are 0 (not active) and 1 (active)
-- previous_content_ID: An id corresponding to a unit that comes before this unit. If it's 0, then the unit is the first one
-- options: A string holding a serialized array with unit options
-- metadata: A string holding a serialized array with unit metadata
-- publish: Whether the unit created should be visible to students (ie 'published')
CREATE TABLE content (
  id int NOT NULL identity,
  name varchar(255) NOT NULL,
  data text NULL,
  parent_content_ID int default '0',
  lessons_ID int default '0',
  timestamp int NOT NULL,
  ctg_type varchar(255) NOT NULL,
  active int default '1',
  previous_content_ID int default '0',
  options text NULL,
  metadata text NULL,
  scorm_version varchar(50) NULL,
  publish int default '1',
  identifier varchar(255) NOT NULL default '',
  PRIMARY KEY (id)
);

--
-- Table 'courses'
--
-- This table represent a course
-- Fields:
-- id (primary key): A numerical identifier
-- name: The course name
-- active: Whether this course is active or not. Possible values are 0 (not active) and 1 (active)
-- archive: A timestamp indicating when this entity was archived. If 0, then the entity is not archived. Archived entities MUST have active = 0 also
-- created: Course creation timestamp
-- options: A serialized array that holds the course options
-- metadata: A string holding a serialized array with unit metadata
-- description: A textual description of this entity
-- info: A serialized array holding course information
-- price: The price of the course, or 0 if it's free
-- show_catalog: Whether to show this course on the course catalog list
-- publish: Whether the course created should be visible to students (ie 'published')
-- directions_ID: The id of the direction (category) that this course belongs to, corresponding to the 'id' field of the 'directions' table
-- languages_NAME: The language that this course supports. It's value corresponds to the 'name' field of the 'languages' table
-- reset: Whether course is reset when certificate expires
-- certificate_expiration: The time duration until the certificate expires(from being issued)
-- max_users: The maximum number of users a lesson is allowed to have
-- rules: A serialized array that corresponds to the succession rules applied among lessons in the course
-- instance_source: If set, this course is an instance, and the field points to the original course id
CREATE TABLE courses (
  id int NOT NULL identity,
  name varchar(150) NOT NULL,
  active int NOT NULL default '1',
  archive int default 0,
  created int NULL,
  options text NULL,
  metadata text NULL,
  description text NULL,
  info text NULL,
  price float default '0',
  show_catalog int NOT NULL default '1',
  publish int default '1',
  directions_ID int NULL,
  languages_NAME varchar(50) NOT NULL,
  reset int NOT NULL default '0',
  certificate_expiration int NULL,
  max_users int NULL,
  rules text NULL,
  instance_source int default '0',
-- FOREIGN KEY (directions_ID) REFERENCES directions (id),
-- FOREIGN KEY (languages_ID) REFERENCES languages (id),
  PRIMARY KEY (id)
);


--
-- Table 'users_to_courses'
--
-- This table represents the relation between a user and a course
-- Fields:
-- users_LOGIN: user's login that is assiciated with the course
-- courses_ID: id of the course
-- active: if 0, then the user cannot access the course, even though he/she has it
-- archive: A timestamp indicating whether the user relation to the lesson is considered active. If 0, then it is active.
-- from_timestamp: Time when user enrolled to course. If it's 0, the user has the course but has yet to be activated by the admin
-- user_type: Type that user enrolled to course as (student, professor, etc)
-- completed: shows if course is completed by user (for student types)
-- score: shows the score that user has for the course
-- issued_certificate: stores data about the certificate that user takes for the course
-- comments: stores comments from professor or admininstrator when user completes course
-- to_timestamp: time that user completes course
CREATE TABLE users_to_courses (
  users_LOGIN varchar(100) NOT NULL,
  courses_ID int NOT NULL default '0',
  active int NOT NULL default '0',
  archive int default 0,
  from_timestamp int NULL,
  user_type varchar(50) NULL,
  completed int NOT NULL default '0',
  score int NOT NULL default '0',
  issued_certificate text NULL,
  comments text NULL,
  to_timestamp int NULL,
-- FOREIGN KEY (users_ID) REFERENCES users (id),
-- FOREIGN KEY (courses_ID) REFERENCES courses (id),
  primary key (users_LOGIN, courses_ID)
);

--
-- Table 'lessons_to_courses'
--
-- This table represents the relationship between lessons and courses
-- Fields:
-- courses_ID: The course id
-- lessons_ID: The lesson id
-- previous_lessons_ID: The id of the previous lesson. This defines the succession of lessons in the course
CREATE TABLE lessons_to_courses (
  courses_ID int NOT NULL,
  lessons_ID int NOT NULL,
  previous_lessons_ID int default 0,
-- FOREIGN KEY (courses_ID) REFERENCES courses (id),
-- FOREIGN KEY (lessons_ID) REFERENCES lessons (id),
-- FOREIGN KEY (previous_lessons_ID) REFERENCES lessons (id),
  PRIMARY KEY (lessons_ID, courses_ID)
);



--
-- Table 'directions'
--
-- This table represents a system category (direction)
-- Fields:
-- id (primary key): A numerical identifier
-- name: The category name
-- active: Whether the category is active. Possible values are 0 (non active) and 1 (active)
-- parent_direction_ID The id of the category's parent category. If it's 0, then the category is top-most
CREATE TABLE directions (
  id int NOT NULL identity,
  name varchar(150) NOT NULL,
  active int NOT NULL default '1',
  parent_direction_ID int default 0,
  PRIMARY KEY (id)
);

--
-- Table 'done_questions'
--
-- This table holds data for test questions completed by users
-- Fields:
-- id (primary key): A numerical identifier
-- done_tests_ID: The id of the done test that the question is part of, corresponding to the 'id' field of the 'done_tests' table
-- questions_ID: The id of the question whos result is stored here, corresponding to the 'id' field of the 'questions' table
-- answer: The answer that the user gave, represented as a serialized string
-- score: The user's score in this question. If score is < 0, then it corresponds to a question which will be manually corrected 
-- timestamp: The time that the question was completed
CREATE TABLE done_questions (
  id int NOT NULL identity,
  done_tests_ID int NOT NULL default '0',
  questions_ID int NOT NULL default '0',
  answer text NULL,
  score float default '0',
  timestamp int NOT NULL,
  PRIMARY KEY (id)
);

--
-- Table 'done_tests'
--
-- This table holds data for tests completed by users
-- Fields:
-- id (primary key): A numerical identifier
-- users_LOGIN: The user that completed the test, matching the 'login' field at the 'users' table
-- tests_ID: The id of the test whos result is stored here, corresponding to the 'id' field of the 'tests' table
-- timestamp: The time that the test was completed
-- score: The user's score in the test.
-- comments: Comments that the professor may have attached to the user
-- duration: The time (in seconds) that the user spent on the test
CREATE TABLE done_tests (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NOT NULL,
  tests_ID int NOT NULL default '0',
  timestamp int NOT NULL,
  score float default '0',
  comments text NULL,
  duration int NOT NULL,
  PRIMARY KEY (id)
);

--
-- Table 'f_forums'
--
-- This table holds data for forums
-- Fields:
-- id (primary key): A numerical identifier
-- title: The forum's title
-- lessons_ID: The id of the lesson that this forum is attached to. If it's 0, then the forum is not associated to a lesson
-- parent_id: The id of the forum's parent forum. If it's 0, then this forum is a 'root' forum
-- status: May be 1 for 'public' (default), 2 for 'locked' or 3 for 'invisible' and corresponds to the forum's status 
-- users_LOGIN: The forum's creator, matching the 'login' field at the 'users' table
-- comments: Comments related to this forum
CREATE TABLE f_forums (
  id int NOT NULL identity,
  title varchar(255) NOT NULL,
  lessons_ID int NOT NULL default '0',
  parent_id int NOT NULL default '0',
  status int NOT NULL default '1',
  users_LOGIN varchar(100) NOT NULL,
  comments text NULL,
  PRIMARY KEY (id)
);

--
-- Table 'f_configuration'
--
-- This table holds the forum's configuration options
-- Fields:
-- name (primary key): A word representing the option name
-- value: A string holding the option value
CREATE TABLE f_configuration (
  name varchar(100) NOT NULL,
  value varchar(150) NOT NULL,
  PRIMARY KEY (name)
);

--
-- Table 'f_folders'
--
-- This table holds the virtual folders for personal messages
-- Fields:
-- id (primary key): A numerical identifier
-- name: The folder's name
-- users_LOGIN: The folder's owner, corresponding to the 'login' field at the 'users' table
-- parent_id: The folder's parent folder, or 0 if it's a root folder
CREATE TABLE f_folders (
  id int NOT NULL identity,
  name varchar(150) NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  parent_id int NOT NULL default '0',
  PRIMARY KEY (id)
);

--
-- Table 'f_messages'
--
-- This table holds the messages posted to the forum
-- Fields:
-- id (primary key): A numerical identifier
-- f_topics_ID: The id of the topic that this message was posted in
-- title: The message's (optional) title
-- body: The message body
-- timestamp: The time that the message was posted
-- users_LOGIN: The user that posted the message, corresponding to the 'login' field at the 'users' table
-- replyto: Whether this message is a reply to another message. If so, then its value is the id of the original message, otherwise it's 0 (deprecated)
-- rank: deprecated
CREATE TABLE f_messages (
  id int NOT NULL identity,
  f_topics_ID int NOT NULL default '0',
  title varchar(255) NOT NULL,
  body text NOT NULL,
  timestamp int NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  replyto int NOT NULL default '0',
  rank int NOT NULL default '0',
  PRIMARY KEY (id)
);

--
-- Table 'f_personal_messages'
--
-- This table holds the personal messages sent among users
-- Fields:
-- id (primary key): A numerical identifier
-- users_LOGIN: The user that the message belongs to, corresponding to the 'login' field at the 'users' table
-- recipient: The recipent(s) of the message, a comma-seprated list of user logins
-- sender: The sender of the message, corresponding to the 'login' field at the 'users' table
-- timestamp: The time that the message was sent
-- attachments: If the message has an attachment, this field holds its identifier (an id corresponding to the 'files' table, or a full file path)
-- title: The message's title
-- body: The message body
-- f_folders_ID: The folder that this message displays in, corresponding to the 'id' field in the 'f_folders' table
-- viewed: Boolean value where 1 means the user has read the message, and 0 he hasn't 
-- priority: A number indicating the priority of the message, where higher values mean higher priority
CREATE TABLE f_personal_messages (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NOT NULL,
  recipient text NULL,
  sender varchar(100) NOT NULL,
  timestamp int NOT NULL,
  attachments text NULL,
  title varchar(255) NOT NULL,
  body text NOT NULL,
  bcc int NOT NULL default '0',
  f_folders_ID int NOT NULL default '1',
  viewed int NOT NULL default '0',
  priority int NOT NULL default '0',
  PRIMARY KEY (id)
);

--
-- Table 'f_poll'
--
-- This table holds the forum polls
-- Fields:
-- id (primary key): A numerical identifier
-- title: The poll title
-- question: The questions that the poll has
-- options: Poll options
-- timestamp_created: The time that this poll was created
-- users_LOGIN: The user that created the poll
-- f_forums_ID: The id of the forum that the poll belongs to
-- timestamp_start: The time that the poll will be available from
-- timestamp_end: The time that the poll will be available until
-- views: How many people have seen this poll
-- sticky: Whether this poll is "sticky" i.e. it is always on top, can be either 0 or 1
-- comments: Comments that display next to the poll
CREATE TABLE f_poll (
  id int NOT NULL identity,
  title varchar(255) NOT NULL,
  question text NOT NULL,
  options text NOT NULL,
  timestamp_created int NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  f_forums_ID int NOT NULL default '0',
  timestamp_start int NOT NULL,
  timestamp_end int NOT NULL,
  views int NOT NULL default '0',
  sticky int NOT NULL default '0',
  comments text NULL,
  PRIMARY KEY (id)
);

--
-- Table 'f_topic'
--
-- This table holds the forum topics
-- Fields:
-- id (primary key): A numerical identifier
-- f_forums_ID: The id of the forum that the topic belongs to
-- timestamp: The time that this topic was created
-- title: The topic title
-- users_LOGIN: The user that created the topic
-- views: How many people have seen this topic
-- viewed_by: A list of user logins that have seen this topic
-- status: May be 1 for 'public' (default), 2 for 'locked' or 3 for 'invisible'
-- sticky: Whether this topic is "sticky" i.e. it is always on top, can be either 0 or 1
-- comments: Comments that display next to the topic
CREATE TABLE f_topics (
  id int NOT NULL identity,
  f_forums_ID int NOT NULL default '0',
  timestamp int NOT NULL,
  title varchar(255) NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  views int default '0',
  viewed_by text NULL,
  status int NOT NULL default '1',
  sticky int default '0',
  comments text NULL,
  PRIMARY KEY (id)
);

--
-- Table 'f_users_to_polls'
--
-- This table holds people's votes to a poll
-- Fields:
-- f_poll_ID: The id of the poll that the vote is for
-- users_LOGIN: The user that submited the vote
-- vote: The vote for the poll
-- timestamp: The time that this vote was submited
CREATE TABLE f_users_to_polls (
  f_poll_ID int NOT NULL default '0',
  users_LOGIN varchar(100) NOT NULL,
  vote int NOT NULL default '0',
  timestamp int NOT NULL,
  primary key (f_poll_ID, users_LOGIN)
);


--
-- Table 'glossary'
--
-- This table holds glossary words
-- Fields:
-- id (primary key): A numerical identifier
-- name: The word in the glossary
-- lessons_ID: The id of the lesson that the word is for
-- info: Description of the word
-- type: The word type, for example 'general'
-- active: Whether this word should be hightlighted, can be either 1 (active) or 0
CREATE TABLE glossary (
  id int NOT NULL identity,
  name varchar(255) NOT NULL,
  lessons_ID int NOT NULL default '0',
  info text NULL,
  type varchar(20) NOT NULL default 'general',
  active int NOT NULL default '1',
  PRIMARY KEY (id)
);

--
-- Table 'languages'
--
-- Fields:
-- id (primary key): A numerical identifier
-- name: The language name, must be unique
-- active: Whether this language is available, can be either 1 (active) or 0
-- translation: The language name in its native language
-- rtl: Whether this is a Right-To-Left written language, can be either 1 (rtl) or 0
CREATE TABLE languages (
  id int NOT NULL identity,
  name varchar(50) NOT NULL,
  active int NOT NULL default '1',
  translation varchar(50),
  rtl int NOT NULL default '0',
  PRIMARY KEY (id),
  UNIQUE (name)
);


--
-- Table 'lessons'
--
-- Fields:
-- id (primary key): A numerical identifier
-- name: The lesson name
-- directions_ID: The id of the direction that this lesson belongs to, corresponds to the 'id' field of the 'directions' table
-- info: A serialized array that corresponds to the lesson information. Once unserialized, this information can instantiate an EfrontInformation object
-- price: A number corresponding to the lesson price
-- active: Whether this lesson is active. Can be either 0 (inactive) or 1 (active)
-- show_catalog: Whether to show this course on the course catalog list
-- options: A serialized array that holds the lesson options
-- languages_NAME: The lesson's language, corresponds to the 'name' field in the 'languages' table
-- metadata: The lesson metadata, in a serialized array, that can be instantiated to an EfrontInformation object
-- course_only: A flag that sets whether this lesson will be accessed through a course (1) or not (0)
-- certificate: A certificate that can be issued for this lesson
-- from_timestamp: The time that the lesson will be available from
-- to_timestamp: The time that the lesson will be available until
-- shift: Whether this lesson supports shifting based on user registration date
-- publish: Whether the lesson created should be visible to students (ie 'published')
-- created: Lesson creation timestamp
-- max_users: The maximum number of users a lesson is allowed to have
-- archive: A timestamp indicating when this entity was archived. If 0, then the entity is not archived. Archived entities MUST have active = 0 also
CREATE TABLE lessons (
  id int NOT NULL identity,
  name varchar(150) NOT NULL,
  directions_ID int default '0',
  info text NULL,
  price float default '0',
  active int NOT NULL default '1',
  show_catalog int NOT NULL default '1',
  duration int default 0,
  options text NULL,
  languages_NAME varchar(50) NOT NULL,
  metadata text NULL,
  course_only int default '0',
  certificate text NULL,
  from_timestamp int NULL,
  to_timestamp int NULL,
  shift int default '0',
  publish int default '1',
  share_folder int default 0,
  created int NULL,
  max_users int NULL,
  archive int default 0,
  instance_source int default '0',
  originating_course int default '0',
  PRIMARY KEY (id)
);

--
-- Table 'users_to_lessons'
--
-- This table represents the relation between a user and a lesson
-- Fields:
-- users_LOGIN: user's login that is assiciated with the lesson
-- lessons_ID: id of the lesson
-- active: if 0, then the user cannot access the lesson, even though he/she has it
-- archive: A timestamp indicating whether the user relation to the lesson is considered active. If 0, then it is active.
-- from_timestamp: Time when user enrolled to lesson. If it's 0, the user has the lesson but has yet to be activated by the admin
-- user_type: Type that user enrolled to lesson as (student, professor, etc)
-- completed: shows if lesson is completed by user (for student types)
-- score: shows the score that user has for the lesson
-- issued_certificate: stores data about the certificate that user takes for the lesson
-- comments: stores comments from professor or admininstrator when user completes lesson
-- to_timestamp: time that user completes lesson
CREATE TABLE users_to_lessons (
  users_LOGIN varchar(100) NOT NULL,
  lessons_ID int NOT NULL default '0',
  active int NOT NULL default '0',
  archive int default 0,
  from_timestamp int NULL,
  user_type varchar(50) NULL,
  positions text NULL,
  done_content text NULL,
  current_unit int default 0,
  completed int NOT NULL default '0',
  score int NOT NULL default '0',
  issued_certificate text NULL,
  comments text NULL,
  to_timestamp int NULL,
  primary key (users_LOGIN, lessons_ID)
);

--
-- Table 'lesson_conditions'
--
-- Fields:
-- id (primary key): A numerical identifier
-- lessons_ID: The id of the lesson that this condition refers to, corresponds to the 'id' field of the 'lessons' table
-- type: The type of the condition, can be 'all_units', 'percentage_units', 'specific_unit', 'all_tests', 'specific_test'
-- options: Options that comprise the condition, depending on its type, for example the percentage or the unit id
-- relation: The condition's relation to other conditions of the same lesson, can be 'and' or 'or'
CREATE TABLE lesson_conditions (
  id int NOT NULL identity,
  lessons_ID int NOT NULL,
  type varchar(255) NOT NULL,
  options text NULL,
  relation varchar(255) NOT NULL default 'and',
  PRIMARY KEY (id)
);

--
-- Table 'logs'
--
-- Fields:
-- id (primary key): A numerical identifier
-- users_LOGIN: The user that this log entry refers to
-- timestamp: The time that this log entry was triggered
-- action: The action that triggered the entry, for example 'login', 'logout', 'lesson', 'tests', 'content', 'personal', 'lastmove'
-- comments: Special data referring to the action, for example the session id, or the content id
-- session_ip: The ip of the user that initiated the log entry
-- lessons_ID: The id of the lesson that may has to do with the log entry
CREATE TABLE logs (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NOT NULL,
  timestamp int NOT NULL,
  action varchar(255) NOT NULL,
  comments varchar(32) NOT NULL default '0',
  session_ip char(8) NOT NULL default '0',
  lessons_ID int default '0',
  PRIMARY KEY (id)
);


CREATE TABLE modules (
  className varchar(150) NOT NULL,
  db_file varchar(255),
  name varchar(150) NOT NULL,
  active int NOT NULL,
  title varchar(150) NOT NULL,
  author varchar(100) NULL,
  version varchar(10) NULL,
  description text NULL,
  position varchar(150) NOT NULL,
  menu varchar(255) NULL,
  mandatory varchar(255) NULL,
  permissions varchar(32) NOT NULL default 'administrator',
  PRIMARY KEY (className)
);

--
-- Table 'news'
--
-- Fields:
-- id (primary key): A numerical identifier
-- title: The announcement's title
-- data: The annoucnement itself
-- timestamp: The time that the announcement will be valid from
-- lessons_ID: The id of the lesson that this announcement concerns. If it's 0, it's a system announcement
-- users_LOGIN: The user that posted the announcement
CREATE TABLE news (
  id int NOT NULL identity,
  title varchar(255) NULL,
  data text NULL,
  timestamp int default 0,
  expire int default 0,
  lessons_ID int NULL,
  users_LOGIN varchar(100) NOT NULL,
  PRIMARY KEY (id)
);

--
-- Table 'periods' DEPRECATED
--
-- Fields:
-- id (primary key): A numerical identifier
-- name: The period name
-- from_timestamp: The time that the period starts
-- to_timestamp: The time that the period ends
-- lessons_ID: The lesson that this period is for
CREATE TABLE periods (
  id int NOT NULL identity,
  name varchar(150) NOT NULL,
  from_timestamp int NOT NULL,
  to_timestamp int NOT NULL,
  lessons_ID int NOT NULL default '0',
  PRIMARY KEY (id)
);

CREATE TABLE projects (
  id int NOT NULL identity,
  title varchar(150) NULL,
  data text NULL,
  deadline int NULL,
  creator_LOGIN varchar(100) NOT NULL,
  lessons_ID int NULL,
  auto_assign int NOT NULL default '0',
  metadata text NULL,
  PRIMARY KEY (id),


);

--
-- Table 'questions'
--
-- Fields:
-- id (primary key): A numerical identifier
-- text: The question text
-- type: The question type, may be one out of: 'raw_text', 'multiple_one', 'multiple_many', 'match', 'true_false', 'empty_spaces'
-- content_ID: The unit that this question is associated to. Corresponds to the 'id' field of the 'content' table. If 0, then the questions is not associated to any unit
-- difficulty: The difficulty of the question, may be one out of: 'easy', 'medium', 'hard'
-- options: A serialized array with the question options, for example if it's a multiple questions, the different options
-- answer: The answer(s) of the question, usually in a serialized array
-- explanation: A default explanation added by the professor that displays when the question is completed
-- answers_explanation: Explanations per answer
-- estimate: A number depicting the estimated time (in seconds) a user will need to complete the question
CREATE TABLE questions (
  id int NOT NULL identity,
  text text NOT NULL,
  type varchar(255) NOT NULL,
  content_ID int NOT NULL default '0',
  lessons_ID int NOT NULL default '0',
  difficulty varchar(255) NOT NULL,
  options text NULL,
  answer text NULL,
  explanation text NULL,
  answers_explanation text NULL,
  estimate int NULL,
  PRIMARY KEY (id)
);

--
-- Table 'themes'
--
-- Fields:
-- id (primary key): A numerical identifier
-- name: The theme name
-- title: The theme title
-- author: The author of the theme
-- version: The version of the theme
-- description: An extended description of the theme
-- options: The options of the theme, a serialized array
-- layout: Layout settings for the current theme
-- path: The path to this theme, can be a local or remote folder
CREATE TABLE themes (
  id int NOT NULL identity,
  name varchar(100) NOT NULL,
  title varchar(100) NULL,
  author varchar(100) NULL,
  version varchar(10) NULL,
  description text NULL,
  options text NULL,
  layout text NULL,
  path text NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (name)
);


--
-- Table 'rules'
--
-- Fields:
-- id (primary key): A numerical identifier
-- users_LOGIN: student that rule is refered to
-- content_ID: The unit that rule is refered to
-- rule_type: type of the rule may be one out of: 'always','hasnot_seen'
-- rule_content_ID: The unit that rule depends on
-- rule_option: deprecated
-- lessons_ID: The lesson that the rule belongs to
CREATE TABLE rules (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NOT NULL,
  content_ID int NOT NULL default '0',
  rule_type varchar(255) NOT NULL,
  rule_content_ID int default '0',
  rule_option float default '0',
  lessons_ID int default '0',
  PRIMARY KEY (id)
);

CREATE TABLE scorm_data (
  id int NOT NULL identity,
  content_ID int NOT NULL default '0',
  users_LOGIN varchar(100) NULL,
  timestamp int NULL,
  lesson_location text NULL,
  maxtimeallowed varchar(255) NULL,
  timelimitaction varchar(255) NULL,
  masteryscore varchar(255) NULL,
  datafromlms text NULL,
  entry varchar(255) NOT NULL default '',
  total_time varchar(255) NULL,
  comments varchar(255) NULL,
  comments_from_lms text NULL,
  lesson_status varchar(255) NULL,
  score varchar(255) NULL,
  scorm_exit varchar(255) NULL,
  minscore varchar(255) NULL,
  maxscore varchar(255) NULL,
  suspend_data text NULL,
  completion_threshold varchar(255) NULL,
  completion_status varchar(255) NULL,
  PRIMARY KEY (id)
);

CREATE TABLE search_keywords (
  keyword int NULL,
  foreign_ID int NOT NULL default '0',
  table_name int NOT NULL,
  position int NOT NULL default '1'
);

CREATE TABLE search_invertedindex (
  id int NOT NULL identity,
  keyword varchar(150) NOT NULL,
  PRIMARY KEY(id)
);



--
-- Table 'tests'
--
-- Fields:
-- id (primary key): A numerical identifier
-- active: Whether this lesson is active. Can be either 0 (inactive) or 1 (active)
-- content_ID: The unit that this test is associated to. Corresponds to the 'id' field of the 'content' table
-- lessons_ID: The id of the lesson that this test is associated to, or 0 if it's not associated to any lesson
-- name: The name of the test
-- test_active: Whether the test is active
-- description: A textual description of the test
-- mastery_score: A number 0-100 that sets the score above which the test is regarded as "passed"
-- options: A serialized array of options
-- publish: Whether the lesson created should be visible to students (ie 'published')
CREATE TABLE tests (
  id int NOT NULL identity,
  active int NOT NULL default '1',
  content_ID int NOT NULL default '0',
  lessons_ID int NOT NULL default '0',
  name varchar(255) NOT NULL default '',
  mastery_score int NOT NULL default '0',
  description text NULL,
  options text NULL,
  publish int default '1',
  PRIMARY KEY (id)
);

CREATE TABLE tests_to_questions (
  tests_ID int NOT NULL default '0',
  questions_ID int NOT NULL default '0',
  weight int NOT NULL default '1',
  previous_question_ID int NOT NULL default '0',
  primary key (tests_ID, questions_ID)
);

--
-- Table 'completed_tests'
--
-- Fields:
-- id (primary key): A numerical identifier
-- users_LOGIN: The user that has done this test, matching the 'login' field at the 'users' table
-- tests_ID: The id of the test that this instance corresponds to. If 0, the corresponding test no longer exists
-- test: The serialized EfrontCompletedTest object
-- status: The completed test status, can be '', 'incomplete', 'failed', 'passed', 'completed', 'deleted'
-- timestamp: The time that the test started
-- archive: A boolean value that sets whether this completed test is archive. Archived tests are passed tests, and may be accessed only through the corresponding sections
-- time_start: The time that the test started
-- time_end: The time that the test ended
-- time_spent: The total time spent in this test (can be different than time_end-time_start, due to pauses)
-- score: The user's score in this test
-- pending: Whether the test is pending
CREATE TABLE completed_tests (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NULL,
  tests_ID int NOT NULL default '0',
  test text NULL,
  status varchar(255),
  timestamp int NOT NULL default 0,
  archive int NOT NULL default 0,
  time_start int ,
  time_end int ,
  time_spent int ,
  score float,
  pending int NOT NULL default 0,







  primary key (id)
);

--
-- Table 'users'
--
-- This table represents a user entity
-- Fields:
-- id (key): A numerical identifier
-- login (primary key): The user identification string, for example 'jdoe'
-- password: The user's password for the system, for example 'a4807fe70ffc6466c7b9bcdeb084d5df'
-- email: The user's email, for example 'jdoe@example.com'
-- languages_NAME: A string representing the user's language. This matches the key field 'name' in the 'languages' table. For example, 'english'
-- timezone: a string denoting this user's time zone - since 3.6.0
-- name: The user's first name, for example 'John' 
-- surname: The user's last name, for example 'Doe'
-- active: Whether this user is active. Possible values are 0 (inactive) and 1 (active)
-- comments: Any comments that have to do with the user
-- user_type: The basic user type. Valid values are: 'student', 'professor', 'administrator'
-- timestamp: A 10-digit number representing the time that the user registered to the system
-- avatar: A file path or id (corresponding to the 'files' table) that represents a user image
-- pending: Whether this user has registered to the system, but his registration is not confirmed yet by the administrator. Possible values are 0 (normal) and 1 (pending)
-- user_types_ID: An id corresponding to the 'user_types' table, that represents a special user type (custom user types based on the predefined 'student', 'professor', 'administrator')
-- additional_accounts: A serialized list of account logins, that the user may automatically switch to.
-- status: the eFront social status-mood text
-- short_description: the eFront social short description - CV text
-- balance: The credit left to the user for getting lessons
-- archive: A timestamp indicating when this entity was archived. If 0, then the entity is not archived. Archived entities MUST have active = 0 also
-- dashboard_positions: The positions of the elements on the user's dashboard
-- need_mod_init: A special flag used by the jfusion plugin
CREATE TABLE users (
  id int NOT NULL identity,
  login varchar(100) NOT NULL,
  password char(32) NOT NULL,
  email varchar(150) NOT NULL,
  languages_NAME varchar(50) NOT NULL,
  timezone varchar(100) default '',
  name varchar(100) NOT NULL,
  surname varchar(100) NOT NULL,
  active int NOT NULL default '1',
  comments text NULL,
  user_type varchar(50) NOT NULL default 'student',
  timestamp int NOT NULL,
  avatar varchar(255) NULL,
  pending int NOT NULL default '0',
  user_types_ID int default '0',
  additional_accounts text NULL,
  viewed_license int default '0',
  status varchar(255) default '',
  short_description text NULL,
  balance float default 0,
  archive int default 0,
  dashboard_positions text NULL,
  need_mod_init int default '0',
  PRIMARY KEY (login),

);

CREATE TABLE users_to_chatrooms (
  users_LOGIN varchar(100) NOT NULL,
  chatrooms_ID int NOT NULL default '0',
  users_USER_TYPE varchar(50) NOT NULL,
  timestamp int NOT NULL,
  primary key (users_LOGIN, chatrooms_ID)
);





CREATE TABLE users_to_projects (
  users_LOGIN varchar(100) NOT NULL,
  projects_ID int NOT NULL default '0',
  status int NOT NULL default '0',
  comments text NULL,
  grade int NULL,
  filename varchar(255) NULL,
  upload_timestamp int NULL,
  primary key (users_LOGIN, projects_ID)
);


CREATE TABLE user_types (
  id int NOT NULL identity,
  name varchar(50) NOT NULL,
  basic_user_type varchar(50) NOT NULL,
  core_access text NULL,
  modules_access text NULL,
  active int NOT NULL default '1',
  PRIMARY KEY (id)
);

CREATE TABLE tokens (
  token char(30) NOT NULL,
  status text NOT NULL,
  users_LOGIN varchar(100),
  create_timestamp int NOT NULL,
  expired int NOT NULL ,
  PRIMARY KEY (token)
);

CREATE TABLE files (
  id int NOT NULL identity,
  path varchar(max) NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  timestamp int NOT NULL,
  description text NULL,
  groups_ID int not null default 0,
  access smallint not null default 755,
  shared int default 0,
  metadata text NULL,
  PRIMARY KEY (id)
);




CREATE TABLE groups (
  id int NOT NULL identity,
  name varchar(150) NOT NULL,
  description text NULL,
  active int NOT NULL default '1',
  user_types_ID varchar(50) default '0',
  languages_NAME varchar(50) NULL,
  users_active int default 0,
  assign_profile_to_new int default 0,
  unique_key varchar(255) default '',
  is_default int default 0,
  key_max_usage int default 0,
  key_current_usage int default 0,
  PRIMARY KEY (id)
);


CREATE TABLE users_to_groups (
  groups_ID int NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  PRIMARY KEY (groups_ID,users_LOGIN)
);

CREATE TABLE users_online (
  users_LOGIN varchar(100) NOT NULL,
  timestamp int NOT NULL,
  timestamp_now int NOT NULL,
  session_ip varchar(255) NOT NULL,
  PRIMARY KEY (users_LOGIN)
);







CREATE TABLE questions_to_skills (
 questions_id int NOT NULL,
 skills_ID int not null,
 relevance int default 1,
);




CREATE TABLE events (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NOT NULL,
  users_name varchar(255) NOT NULL,
  users_surname varchar(255) NOT NULL,
  timestamp int NOT NULL,
  type int NOT NULL,
  lessons_ID varchar(255) NULL,
  lessons_name varchar(255) NULL,
  entity_ID varchar(255) NULL,
  entity_name varchar(255) NULL,
  PRIMARY KEY (id)
);

CREATE TABLE profile_comments (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NOT NULL,
  authors_LOGIN varchar(100) NOT NULL,
  timestamp int NOT NULL,
  data text NOT NULL,
  PRIMARY KEY (id)
);



--
-- Table 'notifications'
--
-- timestamp of date for the email to be sent
-- send_intervanl should the email be sent periodically? if so this is the period
-- send_conditions to which category should the email be sent?
-- type_entity the type of the event . "_" . the ID of the involved entity from the list in events.class.php OR NULl if we have a non-event notification
-- recipient if IS NOT NULL then this is the single recipient's login of the email
-- html_message: 0 text/plain message body, 1 text/html message body
-- subject/message: self-explanatory
--
CREATE TABLE notifications (
  id int NOT NULL identity,
  timestamp int NOT NULL,
  send_interval varchar(10) NOT NULL,
  send_conditions text NULL,
  id_type_entity varchar(255) NULL,
  recipient varchar(255),
  subject varchar(255) NOT NULL,
  message text NULL,
  active int default 1,
  html_message int default 0,
  PRIMARY KEY(id)
);

--
-- Table 'event_notifications'
--
-- event_type the type of the event from the list in events.class.php
-- after_time how long after the event triggering should the notification be send
-- send_conditions should the notification apply to a particular lesson, test etc
-- send_recipients: 0 user triggering the event, 1: all users of same lesson
-- html_message: 0 text/plain message body, 1 text/html message body
-- subject, message, active: self-explanatory
--
CREATE TABLE event_notifications (
  id int NOT NULL identity,
  event_type int NOT NULL,
  after_time int NOT NULL default '0',
  send_conditions text NULL,
  send_recipients int default 1,
  subject varchar(255) NOT NULL,
  message text NULL,
  active int default 1,
  html_message int default 0,
  send_immediately int default 0,
  PRIMARY KEY(id)
);

CREATE TABLE sent_notifications (
  id int NOT NULL identity,
  timestamp int NOT NULL,
  recipient varchar(255),
  subject varchar(255) NOT NULL,
  body text NULL,
  PRIMARY KEY(id)
);


CREATE TABLE lessons_to_groups (
  lessons_ID int NOT NULL,
  user_type varchar(50) default 'student',
  groups_ID int NOT NULL,
  PRIMARY KEY(lessons_ID, groups_ID)
);

CREATE TABLE courses_to_groups (
  courses_ID int NOT NULL,
  user_type varchar(50) default 'student',
  groups_ID int NOT NULL,
  PRIMARY KEY(courses_ID, groups_ID)
);

--
-- Table 'users_to_content'
--
-- id (primary key): A numerical identifier
-- users_LOGIN: The user that this bookmark belongs to, matching the 'login' field at the 'users' table
-- content_ID: The id of the unit this comment was appended to, corresponding to the 'id' field of the 'content' table.
-- success_status: The status of the user for this unit, can be either 'passed', 'failed' 'incomplete', or 'unknown'
-- timestamp: The last time that the unit's status changed
-- score: The user's score in the unit.
-- entry: The status of the learner in this unit, can be either 'ab-initio', 'resume' or ''
-- total_time: The total time the learner has spent in this unit
-- suspend_data: Any data that the content might want to store, such as the whole test dump
-- archive: A boolean value that sets whether this occurence is archive
-- time_start: The time that the unit started
-- time_end: The time that the unit ended
-- pending: Whether the unit is pending
CREATE TABLE users_to_content (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NOT NULL,
  content_ID int NOT NULL,
  success_status varchar(15) DEFAULT 'unknown',
  timestamp int NOT NULL,
  score float default '0',
  entry varchar(15) DEFAULT '',
  total_time int NOT NULL,
  suspend_data text NULL,
  archive int NOT NULL default 0,
  time_start int ,
  time_end int ,
  pending int NOT NULL default 0,
  primary key (id)
);

CREATE TABLE lessons_timeline_topics (
  id int NOT NULL identity,
  lessons_ID int NOT NULL,
  title varchar(255) NOT NULL,
  PRIMARY KEY (id)
);

CREATE TABLE lessons_timeline_topics_data (
  id int NOT NULL identity,
  topics_ID int NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  data text NULL,
  PRIMARY KEY (id)
);

CREATE TABLE user_profile (
  name varchar(20) NOT NULL,
  description varchar(100) NOT NULL,
  db_type varchar(10) NOT NULL,
  size int default 255,
  type varchar(10) NULL,
  options text NULL,
  default_value text NULL,
  active int NOT NULL default '1',
  visible int NOT NULL default '1',
  mandatory int NOT NULL default '1',
  languages_NAME varchar(50) NOT NULL,
  PRIMARY KEY (name)
);

CREATE TABLE questions_to_surveys (
  id int NOT NULL identity,
  surveys_ID int NULL,
  type varchar(40) NULL,
  question text NULL,
  answers text NULL,
  created int NULL,
  info text NULL,
  father_ID int NULL,
  PRIMARY KEY (id),

);

CREATE TABLE surveys (
  id int NOT NULL identity,
  survey_code varchar(150) NULL,
  survey_name varchar(150) NULL,
  survey_info text NULL,
  author varchar(100),
  lang varchar(50) NULL,
  start_date int NULL,
  end_date int NULL,
  lessons_ID int NOT NULL,
  status int default '0',
  start_text text NULL,
  end_text text NULL,
  PRIMARY KEY (id),

);

CREATE TABLE survey_questions_done (
  id int NOT NULL identity,
  users_LOGIN varchar(100) NOT NULL,
  surveys_ID int NOT NULL,
  question_ID int NOT NULL,
  user_answers text NOT NULL,
  submited int NULL,
  PRIMARY KEY (id)
);

CREATE TABLE users_to_done_surveys (
  surveys_ID int NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  done int NOT NULL default '0',
  primary key (users_LOGIN, surveys_ID)
);

CREATE TABLE users_to_surveys (
  surveys_ID int NOT NULL,
  users_LOGIN varchar(100) NOT NULL,
  last_access int NULL,
  last_post int NULL,

  primary key (users_LOGIN, surveys_ID)
);

--
-- Table 'carts'
--
-- This table is used to store carts.
-- Fields:
-- id (primary key): A numerical identifier
-- timestamp: A 10-digit number representing the carts's last update time
-- session_id: The session id associated with this cart
-- contents: The contents of the cart
CREATE TABLE carts (
  id int NOT NULL identity,
  timestamp int NOT NULL,
  session_id varchar(255) NOT NULL,
  contents text NULL,
  PRIMARY KEY (id)
);
